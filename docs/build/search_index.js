var documenterSearchIndex = {"docs":
[{"location":"lib/build_phenome/#Build-Phenome","page":"Build Phenome","title":"Build Phenome","text":"","category":"section"},{"location":"lib/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"build_phenome defines the phenomics information including QTL effects and heritability.","category":"page"},{"location":"lib/build_phenome/#Contents","page":"Build Phenome","title":"Contents","text":"","category":"section"},{"location":"lib/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"Pages = [\"build_phenome.md\"]","category":"page"},{"location":"lib/build_phenome/#Index","page":"Build Phenome","title":"Index","text":"","category":"section"},{"location":"lib/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"Pages = [\"build_phenome.md\"]","category":"page"},{"location":"lib/build_phenome/#Public-Interface","page":"Build Phenome","title":"Public Interface","text":"","category":"section"},{"location":"lib/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"build_phenome","category":"page"},{"location":"lib/build_phenome/#Main.XSim.build_phenome","page":"Build Phenome","title":"Main.XSim.build_phenome","text":"Quick Start\n\nQuick setup by assigning number of QTL.\n\nbuild_phenome(n_qtls ::Union{Array{Int64, 1}, Int64};\n              args...)\n\nArguments\n\nn_qtls : Number of simulated QTLs. It can be an array of integers for multiple traits.\nvg : Genetic (co)variances of QTLs.\nh2 : Heritability of simulated traits. This will define the residual (co)variances.\n\nExamples\n\nSingle trait\n\njulia> build_phenome(10)\n[ Info: --------- Phenome Summary ---------\n[ Info: Number of Traits      : 1\n[ Info: Heritability (h2)     : [0.5]\n┌ Info:\n│   Genetic_Variance =\n│    1×1 Array{Float64,2}:\n└     1.0\n┌ Info:\n│   Residual_Variance =\n│    1×1 Array{Float64,2}:\n└     1.0\n[ Info: Number of QTLs        : [10]\n\nMulti-trait with additional information\n\njulia> build_phenome([10, 15];\n                     vg = [1 .5\n                          .5  1],\n                     h2 = [.3, .8])\n[ Info: --------- Phenome Summary ---------\n[ Info: Number of Traits      : 2\n[ Info: Heritability (h2)     : [0.3, 0.8]\n┌ Info:\n│   Genetic_Variance =\n│    2×2 Array{Float64,2}:\n│     1.0  0.5\n└     0.5  1.0\n┌ Info:\n│   Residual_Variance =\n│    2×2 Array{Float64,2}:\n│     2.33333  0.0\n└     0.0      0.25\n[ Info: Number of QTLs        : [10 25]\n\n────────────────────────────────────────────────────────────────\n\nDefine phenome by a file or a DataFrame\n\nDefine genome by providing a formatted dataframe or a path to the file.\n\nbuild_phenome(dt        ::DataFrame; args...)\nbuild_phenome(filename  ::String;    args...)\n\nArguments\n\ndt : A DataFrame with required columns of eff_ prefixed specifying marker effects.\nfilename : A filepath to the file containing phenome information.\n\nExample of the DataFrame\n\n4×7 DataFrame\n Row │ id      chr    bp       cM       MAF      eff_1    eff_2   \n     │ String  Int64  Int64    Float64  Float64  Float64  Float64 \n─────┼────────────────────────────────────────────────────────────\n   1 │ snp 1       1  1818249     50.8      0.5      0.1      0.0\n   2 │ snp 2       1  6557697     80.3      0.5      0.0     -0.3\n   3 │ snp_3       2  2298800     39.2      0.5      0.2      0.0\n   4 │ snp 4       2  5015698     66.3      0.5      0.0      0.5\n\nExamples\n\nBy a filepath\n\njulia> build_phenome(\"path/map.csv\", h2 = [0.3, 0.5])\n\nor a dataframe\n\njulia> using DataFrames\njulia> data = CSV.read(\"path/map.csv\", DataFrame)\njulia> build_phenome(data, h2 = [0.3, 0.5])\n\n[ Info: --------- Phenome Summary ---------\n[ Info: Number of Traits      : 2\n[ Info: Heritability (h2)     : [0.3, 0.5]\n┌ Info: \n│   Genetic_Variance =\n│    2×2 Array{Float64,2}:\n│     1.0  0.0\n└     0.0  1.0\n┌ Info: \n│   Residual_Variance =\n│    2×2 Array{Float64,2}:\n│     2.33333  0.0\n└     0.0      1.0\n[ Info: Number of QTLs        : [2 2]\n\n────────────────────────────────────────────────────────────────\n\nDefine phenome by a matrix of QTL effects\n\nbuild_phenome(QTL_effects ::Union{Array{Float64}, SparseMatrixCSC}; args...)\n\nArguments\n\nQTL_effects : A matrix storing marker effects with the dimension of individuals by markers.\n\nExamples\n\njulia> effects = [0.1  0.0\n                  0.0 -0.3\n                  0.2  0.0\n                  0.0  0.5]\njulia> build_phenome(effects)\n[ Info: --------- Phenome Summary ---------\n[ Info: Number of Traits      : 2\n[ Info: Heritability (h2)     : [0.5, 0.5]\n┌ Info: \n│   Genetic_Variance =\n│    2×2 Array{Float64,2}:\n│     1.0  0.0\n└     0.0  1.0\n┌ Info: \n│   Residual_Variance =\n│    2×2 Array{Float64,2}:\n│     1.0  0.0\n└     0.0  1.0\n[ Info: Number of QTLs        : [2 2]\n\nIt's also possible to add additional information such as heritability.\n\njulia> build_phenome(effects, h2=[0.1, 0.8])\n[ Info: --------- Phenome Summary ---------\n[ Info: Number of Traits      : 2\n[ Info: Heritability (h2)     : [0.1, 0.8]\n┌ Info: \n│   Genetic_Variance =\n│    2×2 Array{Float64,2}:\n│     1.0  0.0\n└     0.0  1.0\n┌ Info: \n│   Residual_Variance =\n│    2×2 Array{Float64,2}:\n│     9.0  0.0\n└     0.0  0.25\n[ Info: Number of QTLs        : [2 2]\n\n\n\n\n\n","category":"function"},{"location":"basic/breed/#Breed","page":"Breed","title":"Breed","text":"","category":"section"},{"location":"dev/custom_data/#Customized-Data","page":"Customized Data","title":"Customized Data","text":"","category":"section"},{"location":"basic/select/#Select","page":"Select","title":"Select","text":"","category":"section"},{"location":"basic/select/#Single-Trait-Selection","page":"Select","title":"Single Trait Selection","text":"","category":"section"},{"location":"basic/select/","page":"Select","title":"Select","text":"We can build genome from demo","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"# load demo genome and phenome\nbuild_demo()\n# override demo phenome with single traits controlled by 50 QTLs\nbuild_phenome(50)\n# inspect the settings\nsummary()\n# initialize a cohort with 100 individuals\ncohort = Cohort(100)","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"[ Info: --------- Genome Summary ---------\n[ Info: Number of Chromosome  : 10\n[ Info: \n[ Info: Chromosome Length (cM): 1500.0\n[ Info: [150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0]\n[ Info: \n[ Info: Number of Loci        : 1000\n[ Info: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\n[ Info: \n[ Info: Genotyping Error      : 0.0\n[ Info: Mutation Rate         : 0.0\n[ Info: \n[ Info: --------- Phenome Summary ---------\n[ Info: Number of Traits      : 1\n[ Info: Heritability (h2)     : [0.5]\n┌ Info: \n│   Genetic_Variance =\n│    1×1 Array{Float64,2}:\n└     1.0\n┌ Info: \n│   Residual_Variance =\n│    1×1 Array{Float64,2}:\n└     1.0\n[ Info: Number of QTLs        : [50]","category":"page"},{"location":"basic/select/#Select-30-individuals","page":"Select","title":"Select 30 individuals","text":"","category":"section"},{"location":"basic/select/","page":"Select","title":"Select","text":"# Assign by integer\ncohort_s = select(cohort, 30)\n# it's equivalent to assigning the selected ratio\ncohort_s = select(cohort, 0.3)","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"[ Info: --------- Selection Summary ---------\n[ Info: Select 30 individuals out of 100 individuals\n[ Info: Selection differential (P): [1.174]\n[ Info: Selection response     (G): [0.843]\n┌ Info:\n│   Residual_Variance =\n│    1×1 Array{Float64,2}:\n└     1.0\n[ Info: --------- Offsprings Summary ---------\n[ Info: Cohort (30 individuals)\n[ Info:\n[ Info: Mean of breeding values:\n[ Info: [1.448]\n[ Info:\n[ Info: Variance of breeding values:\n[ Info: [0.367]","category":"page"},{"location":"basic/select/#Re-Assign-Heritability-or-Residual-Covariance","page":"Select","title":"Re-Assign Heritability or Residual Covariance","text":"","category":"section"},{"location":"basic/select/","page":"Select","title":"Select","text":"It's possible to re-assign heritability or residuals to simulate different selection environment","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"# Assign heritability h2 = 0.1\nprogenies = select(cohort, 30, h2=0.1)\n# Equivalent to assigning residual as 9.0\nprogenies = select(cohort, 30, ve=9.0)","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"[ Info: --------- Selection Summary ---------\n[ Info: Select 30 individuals out of 100 individuals\n[ Info: Selection differential (P): [1.182]\n[ Info: Selection response     (G): [0.338]\n┌ Info:\n│   Residual_Variance =\n│    1×1 Array{Float64,2}:\n└     9.0\n[ Info: --------- Offsprings Summary ---------\n[ Info: Cohort (30 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [0.956]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [0.643]","category":"page"},{"location":"basic/select/#Negative-Selection","page":"Select","title":"Negative Selection","text":"","category":"section"},{"location":"basic/select/","page":"Select","title":"Select","text":"Set is_positive=false to rank individuals in ascending order","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"progenies = select(cohort, 30, is_positive=false)","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"[ Info: --------- Selection Summary ---------\n[ Info: Select 30 individuals out of 100 individuals\n[ Info: Selection differential (P): [-1.19]\n[ Info: Selection response     (G): [-0.89]\n┌ Info: \n│   Residual_Variance =\n│    1×1 Array{Float64,2}:\n└     1.0\n[ Info: --------- Offsprings Summary ---------\n[ Info: Cohort (30 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [-0.24]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [0.566]","category":"page"},{"location":"basic/select/#Random-Selection","page":"Select","title":"Random Selection","text":"","category":"section"},{"location":"basic/select/","page":"Select","title":"Select","text":"progenies = select(cohort, 30, is_random=true)","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"[ Info: --------- Selection Summary ---------\n[ Info: Select 30 individuals out of 100 individuals\n[ Info: Selection differential (P): [-0.06]\n[ Info: Selection response     (G): [-0.191]\n┌ Info: \n│   Residual_Variance =\n│    1×1 Array{Float64,2}:\n└     1.0\n[ Info: --------- Offsprings Summary ---------\n[ Info: Cohort (30 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [0.441]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [0.946]","category":"page"},{"location":"basic/select/#Selection-wiht-Multiple-Parameters","page":"Select","title":"Selection wiht Multiple Parameters","text":"","category":"section"},{"location":"basic/select/","page":"Select","title":"Select","text":"It's possible specify multiple parameters described above in one selection. User can either enclose parameters as keyword arguments, or pass them through a dictionary object","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"# Pass them as keyword arguments\nprogenies = select(cohort, 30, h2=0.3, is_positive=false)\n# Or pass them via a dictionary\nargs = Dict(:h2=>0.3,\n            :is_positive=>false)\nprogenies = select(cohort, 30; args...)","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"[ Info: --------- Selection Summary ---------\n[ Info: Select 30 individuals out of 100 individuals\n[ Info: Selection differential (P): [-1.086]\n[ Info: Selection response     (G): [-0.486]\n┌ Info: \n│   Residual_Variance =\n│    1×1 Array{Float64,2}:\n└     2.3333333333333335\n[ Info: --------- Offsprings Summary ---------\n[ Info: Cohort (30 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [0.154]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [0.818]","category":"page"},{"location":"basic/select/#Multi-Trait-Selection","page":"Select","title":"Multi-Trait Selection","text":"","category":"section"},{"location":"basic/select/","page":"Select","title":"Select","text":"We can build genome from demo","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"# load demo genome and phenome with multiple traits\nbuild_demo()\n# inspect the settings\nsummary()\n# initialize a cohort with 100 individuals\ncohort = Cohort(100)","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"[ Info: --------- Genome Summary ---------\n[ Info: Number of Chromosome  : 10\n[ Info: \n[ Info: Chromosome Length (cM): 1500.0\n[ Info: [150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0]\n[ Info: \n[ Info: Number of Loci        : 1000\n[ Info: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\n[ Info: \n[ Info: Genotyping Error      : 0.0\n[ Info: Mutation Rate         : 0.0\n[ Info: \n[ Info: --------- Phenome Summary ---------\n[ Info: Number of Traits      : 2\n[ Info: Heritability (h2)     : [0.5, 0.5]\n┌ Info: \n│   Genetic_Variance =\n│    2×2 Array{Float64,2}:\n│     1.0  0.0\n└     0.0  1.0\n┌ Info: \n│   Residual_Variance =\n│    2×2 Array{Float64,2}:\n│     1.0  0.0\n└     0.0  1.0\n[ Info: Number of QTLs        : [3 8]","category":"page"},{"location":"basic/select/#Assign-Heritabilities-for-Multiple-Traits","page":"Select","title":"Assign Heritabilities for Multiple Traits","text":"","category":"section"},{"location":"basic/select/","page":"Select","title":"Select","text":"progenies = select(cohort, 30, h2=[0.9, 0.3])","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"[ Info: --------- Selection Summary ---------\n[ Info: Select 30 individuals out of 100 individuals\n[ Info: Selection differential (P): [0.468 1.028]\n[ Info: Selection response     (G): [0.383 0.636]\n┌ Info: \n│   Residual_Variance =\n│    2×2 Array{Float64,2}:\n│     0.111111  0.0\n└     0.0       2.33333\n[ Info: --------- Offsprings Summary ---------\n[ Info: Cohort (30 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [-0.889 0.28]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [0.947 0.625]","category":"page"},{"location":"basic/select/#Assign-Trait-Correlations-via-Residual-Covariance","page":"Select","title":"Assign Trait Correlations via Residual Covariance","text":"","category":"section"},{"location":"basic/select/","page":"Select","title":"Select","text":"progenies = select(cohort, 30, ve=[1   0.3\n                                   0.3   1])","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"[ Info: --------- Selection Summary ---------\n[ Info: Select 30 individuals out of 100 individuals\n[ Info: Selection differential (P): [0.866 0.925]\n[ Info: Selection response     (G): [0.662 0.762]\n┌ Info: \n│   Residual_Variance =\n│    2×2 Array{Float64,2}:\n│     1.0  0.3\n└     0.3  1.0\n[ Info: --------- Offsprings Summary ---------\n[ Info: Cohort (30 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [-0.608 0.406]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [0.549 0.476]","category":"page"},{"location":"basic/select/#Derive-Selection-Index-for-Multiple-Traits","page":"Select","title":"Derive Selection Index for Multiple Traits","text":"","category":"section"},{"location":"basic/select/","page":"Select","title":"Select","text":"Assigning a vector to the parameter weights to derive a index consisting a linear combintation of the weights and the phenotypes.  In this example, we demonstrate two traits with the heritability of 0.3 and 0.8, respectively. And we can select traits with more weight on the second trait which is more heritable, and negatively select the first trait.","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"progenies = select(cohort, 30, h2=[.3, .8], weights=[-0.1, 0.9])","category":"page"},{"location":"basic/select/","page":"Select","title":"Select","text":"[ Info: --------- Selection Summary ---------\n[ Info: Select 30 individuals out of 100 individuals\n[ Info: Selection differential (P): [-0.318 1.027]\n[ Info: Selection response     (G): [-0.233 0.869]\n┌ Info: \n│   Residual_Variance =\n│    2×2 Array{Float64,2}:\n│     2.33333  0.0\n└     0.0      0.25\n[ Info: --------- Offsprings Summary ---------\n[ Info: Cohort (30 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [-1.508 0.513]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [1.053 0.458]","category":"page"},{"location":"lib/cohort/#Cohort-and-Founders","page":"Cohort and Founders","title":"Cohort and Founders","text":"","category":"section"},{"location":"lib/cohort/","page":"Cohort and Founders","title":"Cohort and Founders","text":"tip: Cohort and Founders\nIn the current version, Cohort works exactly the same as Founders.","category":"page"},{"location":"lib/cohort/#Contents","page":"Cohort and Founders","title":"Contents","text":"","category":"section"},{"location":"lib/cohort/","page":"Cohort and Founders","title":"Cohort and Founders","text":"Pages = [\"cohort.md\"]","category":"page"},{"location":"lib/cohort/#Index","page":"Cohort and Founders","title":"Index","text":"","category":"section"},{"location":"lib/cohort/","page":"Cohort and Founders","title":"Cohort and Founders","text":"Pages = [\"cohort.md\"]","category":"page"},{"location":"lib/cohort/#Public-Interface","page":"Cohort and Founders","title":"Public Interface","text":"","category":"section"},{"location":"lib/cohort/","page":"Cohort and Founders","title":"Cohort and Founders","text":"Cohort","category":"page"},{"location":"lib/cohort/#Main.XSim.Cohort","page":"Cohort and Founders","title":"Main.XSim.Cohort","text":"Initialize a cohort by population size\n\nCohort(n::Int64=0)\n\nArguments\n\nn : An integer to assign the population size.\n\nExamples\n\njulia> cohort = Cohort(5)\n[ Info: Cohort (5 individuals)\n[ Info:\n[ Info: Mean of breeding values:\n[ Info: [1.265 1.697]\n[ Info:\n[ Info: Variance of breeding values:\n[ Info: [1.6 1.4]\n\n──────────────────────────────────────────────────────────────\n\nInitialize a cohort by genotypes/haplotypes files\n\nCohort(genetic_data ::Union{DataFrame, Array{Int64}}; args...)\nCohort(filename     ::String; args...)\n\nArguments\n\ngenetic_data : A dataframe/2D-array that stores genotypes/haplotypes in the dimension of individuals by markers.\nfilename : A filepath to a file storing genotypes/haplotypes data.\nn : Number of lines to be loaded from the file. The default value is -1 and the entire file will be loaded.\nrandom : By default it's set to true to randomly select n lines (individuals) from the file to generate the cohort.\nalter_maf : It will update MAF based on the provided genotypes if it's set to true (default).\n\nExample of the demo_genotypes.csv and demo_haplotypes.csv\n\nBoth demo files store marker information for 5 individuals and 4 markers. Use DATA(\"demo_genotypes.csv\") to interact with demo files.\n\n# demo_genotypes.csv\n# rows: individuals, columns: markers\n# Homozygote is coded as 0 and 2, otherwise is coded as 1\n2,0,0,1\n0,0,1,0\n0,1,0,2\n1,1,0,2\n2,0,2,0\n\n# demo_haplotypes.csv\n# rows: individuals, columns: alleles\n# Reference allele is coded as 0, otherwise is coded as 1\n1,1,0,0,0,0,1,0\n0,0,0,0,1,0,0,0\n0,0,0,1,0,0,1,1\n1,0,1,0,0,0,1,1\n1,1,0,0,1,1,0,0\n\nExample\n\n# Load entire file\njulia> cohort = Cohort(\"demo_haplotypes.csv\")\njulia> get_genotypes(cohort)\n5×4 Array{Int64,2}:\n 2  0  0  1\n 2  0  2  0\n 0  0  1  0\n 1  1  0  2\n 0  1  0  2\n\n# Randomly load 3 individuals with a dataframe.\njulia> data = DATA(\"demo_haplotypes.csv\", header=false)\njulia> cohort = Cohort(data, random=true, n=3)\njulia> get_genotypes(cohort)\n3×4 Array{Int64,2}:\n 2  0  2  0\n 0  1  0  2\n 1  1  0  2\n\n# Replace marker MAF by the provided file\njulia> cohort = Cohort(\"demo_haplotypes.csv\", alter_maf=true)\n[ Info: MAF has been updated based on provided haplotypes/genotypes\n[ Info: Cohort (5 individuals)\n[ Info:\n[ Info: Mean of breeding values:\n[ Info: [1.418]\n[ Info:\n[ Info: Variance of breeding values:\n[ Info: [2.012]\n\nFunctions that insepct Cohort properties:\n\nAll the listed functions can take a keyword argument ID=true to insert individuals' IDs as the first column.\n\nGenotypes\n\nGenotype matirx in the dimension of individuals by markers\n\njulia> get_genotypes(cohort)\n5×4 LinearAlgebra.Adjoint{Int64,Array{Int64,2}}:\n 0  0  1  0\n 2  0  2  0\n 2  0  0  1\n 0  1  0  2\n 1  1  0  2\n\nQTLs\n\nQTLs matirx in the dimension of individuals by markers\n\njulia> get_QTLs(cohort)\n5×3 Array{Int64,2}:\n 2  2  0\n 0  0  2\n 0  1  0\n 1  0  2\n 2  0  1\n\nBreeding values\n\nBreeding values in the dimenstion individuals by traits\n\njulia> get_BVs(cohort)\n5×2 LinearAlgebra.Adjoint{Float64,Array{Float64,2}}:\n 1.26491   0.0\n 3.79473   0.0\n 1.26491   1.21268\n 0.0       1.69775\n 0.632456  1.69775\n\nPedigree\n\nPedigree matrix, listed columns are in the order of individuals' ID, sire ID, and dam ID.\n\njulia> get_pedigree(cohort)\n5×3 LinearAlgebra.Adjoint{Int64,Array{Int64,2}}:\n1  0  0\n2  0  0\n3  0  0\n4  0  0\n5  0  0\n\nMinor Allele Frequencies (MAF)\n\nIn the case where we have 3 QTLs out of 4 markers, we want to compare their allel frequencies.\n\njulia> get_MAF(cohort)\n4-element Array{Float64,1}:\n 0.5\n 0.2\n 0.3\n 0.5\n\nPhenotypes\n\nSimulate cohort phenotypes based on the defined phenome, or h2 and ve can be assigned as new heritability and residual variance for the simulation.\n\njulia> get_phenotypes(cohort)\n5×1 Array{Float64,2}:\n  1.1126064336992942\n -0.8337021175232547\n -0.363621019381922\n  4.042256656472762\n  1.7828800511223049\n\n\n\n\n\n","category":"type"},{"location":"basic/founder/#Founders","page":"Founders","title":"Founders","text":"","category":"section"},{"location":"basic/founder/#Data","page":"Founders","title":"Data","text":"","category":"section"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"In this page, files demo_genotypes.csv, demo_haplotypes.csv will be used in the demonstrated examples. Missing values can be represented by -1 or 9. Both demonstrated files contain 5 individuals and 4 genetic markers.","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"# demo_genotypes.csv\n# rows: individuals, columns: markers\n# homozygote is coded as 0 and 2, otherwise is coded as 1\n2,0,0,1\n0,0,1,0\n0,1,0,2\n1,1,0,2\n2,0,2,0\n\n# demo_haplotypes.csv\n# rows: individuals, columns: alleles\n# Reference allele is coded as 0, otherwise is coded as 1\n1,1,0,0,0,0,1,0\n0,0,0,0,1,0,0,0\n0,0,0,1,0,0,1,1\n1,0,1,0,0,0,1,1\n1,1,0,0,1,1,0,0","category":"page"},{"location":"basic/founder/#By-Assigning-a-Population-Size","page":"Founders","title":"By Assigning a Population Size","text":"","category":"section"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"founders = Founders(5)","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"[ Info: Cohort (5 individuals)\n[ Info:\n[ Info: Mean of breeding values:\n[ Info: [1.265 1.697]\n[ Info:\n[ Info: Variance of breeding values:\n[ Info: [1.6 1.4]","category":"page"},{"location":"basic/founder/#By-a-genoetype-or-haplotypes-file","page":"Founders","title":"By a genoetype or haplotypes file","text":"","category":"section"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"# haplotypes\nfounder = Founders(\"demo_haplotypes.csv\")","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"[ Info: MAF has been updated based on provided haplotypes/genotypes\n[ Info: Cohort (5 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [1.391 0.922]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [2.08 0.747]","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"Or if users don't want to update the MAF by the data, alter_maf=false can achieve this purpose.","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"# genotypes\nfounders = Founders(\"demo_genotypes.csv\", alter_maf=false)","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"[ Info: Cohort (5 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [1.391 0.922]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [2.08 0.747]","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"Users can subset the population by assigning n and random. If random=true, n individuals are randomly selected from the file. Otherwise, only the first n individuals will be initialized.","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"founders = Founders(\"demo_genotypes.csv\", n=3, random=true)","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"[ Info: MAF has been updated based on provided haplotypes/genotypes\n[ Info: Cohort (3 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [2.108 0.404]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [2.133 0.49]","category":"page"},{"location":"basic/founder/#Inspect-the-founders","page":"Founders","title":"Inspect the founders","text":"","category":"section"},{"location":"basic/founder/#Genotypes","page":"Founders","title":"Genotypes","text":"","category":"section"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"get_genotypes(founders)","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"5×4 LinearAlgebra.Adjoint{Int64,Array{Int64,2}}:\n 0  0  1  0\n 2  0  2  0\n 2  0  0  1\n 0  1  0  2\n 1  1  0  2","category":"page"},{"location":"basic/founder/#QTLs","page":"Founders","title":"QTLs","text":"","category":"section"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"get_QTLs(founders)","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"5×3 Array{Int64,2}:\n 2  2  0\n 0  0  2\n 0  1  0\n 1  0  2\n 2  0  1","category":"page"},{"location":"basic/founder/#Breeding-Values","page":"Founders","title":"Breeding Values","text":"","category":"section"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"It's stored as a n by n_traits matrix","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"get_BVs(founders)","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"5×2 LinearAlgebra.Adjoint{Float64,Array{Float64,2}}:\n 1.26491   0.0\n 3.79473   0.0\n 1.26491   1.21268\n 0.0       1.69775\n 0.632456  1.69775","category":"page"},{"location":"basic/founder/#Pedigree","page":"Founders","title":"Pedigree","text":"","category":"section"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"get_pedigree(founders)","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"5×3 LinearAlgebra.Adjoint{Int64,Array{Int64,2}}:\n1  0  0\n2  0  0\n3  0  0\n4  0  0\n5  0  0","category":"page"},{"location":"basic/founder/#Minor-Allele-Frequencies-(MAF)","page":"Founders","title":"Minor Allele Frequencies (MAF)","text":"","category":"section"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"In the case where we have 3 QTLs out of 4 markers, we want to compare their allel frequencies.","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"get_QTLs(founders) |> get_MAF","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"3-element Array{Float64,1}:\n 0.5\n 0.3\n 0.5","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"get_MAF(founders)","category":"page"},{"location":"basic/founder/","page":"Founders","title":"Founders","text":"4-element Array{Float64,1}:\n 0.5\n 0.2\n 0.3\n 0.5","category":"page"},{"location":"basic/build_phenome/#Build-Phenome","page":"Build Phenome","title":"Build Phenome","text":"","category":"section"},{"location":"basic/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"build_phenome defines the phenomic information including ","category":"page"},{"location":"basic/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"numbers of chromosomes and loci, genetic position, physical position, and minor allele frequency of each locus, mutation rates, and genotyping error rates.","category":"page"},{"location":"basic/build_phenome/#Data","page":"Build Phenome","title":"Data","text":"","category":"section"},{"location":"basic/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"In this page, you will need a file map.csv to complete the demonstrated examples.","category":"page"},{"location":"basic/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"# map.csv\nid,chr,bp,cM,MAF,eff_1,eff_2\nsnp_1,1,1818249,50.8,0.5,0.1,0.0\nsnp_2,1,6557697,80.3,0.5,0.0,-0.3\nsnp_3,2,2298800,39.2,0.5,0.2,0.0\nsnp_4,2,5015698,66.3,0.5,0.0,0.5","category":"page"},{"location":"basic/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"using DataFrames\ndata = CSV.read(\"map.csv\", DataFrame)","category":"page"},{"location":"basic/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"4×7 DataFrame\n Row │ id      chr    bp       cM       MAF      eff_1    eff_2\n     │ String  Int64  Int64    Float64  Float64  Float64  Float64\n─────┼────────────────────────────────────────────────────────────\n   1 │ snp 1       1  1818249     50.8      0.5      0.1      0.0\n   2 │ snp 2       1  6557697     80.3      0.5      0.0     -0.3\n   3 │ snp_3       2  2298800     39.2      0.5      0.2      0.0\n   4 │ snp 4       2  5015698     66.3      0.5      0.0      0.5","category":"page"},{"location":"basic/build_phenome/#Quick-Start","page":"Build Phenome","title":"Quick Start","text":"","category":"section"},{"location":"basic/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"build_phenome(10)","category":"page"},{"location":"basic/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"[ Info: --------- Phenome Summary ---------\n[ Info: Number of Traits      : 1\n[ Info: Heritability (h2)     : [0.5]\n┌ Info:\n│   Genetic_Variance =\n│    1×1 Array{Float64,2}:\n└     1.0\n┌ Info:\n│   Residual_Variance =\n│    1×1 Array{Float64,2}:\n└     1.0\n[ Info: Number of QTLs        : [10]","category":"page"},{"location":"basic/build_phenome/#Multi-Trait-with-Asigned-Genetic-Variance-and-Heritability","page":"Build Phenome","title":"Multi-Trait with Asigned Genetic Variance and Heritability","text":"","category":"section"},{"location":"basic/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"build_phenome([50, 30];\n              vg = [1 .5\n                   .5  1],\n              h2 = [.3, .8])","category":"page"},{"location":"basic/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"[ Info: --------- Phenome Summary ---------\n[ Info: Number of Traits      : 2\n[ Info: Heritability (h2)     : [0.3, 0.8]\n┌ Info:\n│   Genetic_Variance =\n│    2×2 Array{Float64,2}:\n│     1.0  0.5\n└     0.5  1.0\n┌ Info:\n│   Residual_Variance =\n│    2×2 Array{Float64,2}:\n│     2.33333  0.0\n└     0.0      0.25\n[ Info: Number of QTLs        : [50 80]","category":"page"},{"location":"basic/build_phenome/#By-a-File-or-a-Dataframe","page":"Build Phenome","title":"By a File or a Dataframe","text":"","category":"section"},{"location":"basic/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"Similar to build_genome(), users can build the phenome with a file through a filepath or a dataframe.","category":"page"},{"location":"basic/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"build_phenome(\"demo_map.csv\", h2 = [0.3, 0.5])","category":"page"},{"location":"basic/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"[ Info: --------- Phenome Summary ---------\n[ Info: Number of Traits      : 2\n[ Info: Heritability (h2)     : [0.3, 0.5]\n┌ Info: \n│   Genetic_Variance =\n│    2×2 Array{Float64,2}:\n│     1.0  0.0\n└     0.0  1.0\n┌ Info: \n│   Residual_Variance =\n│    2×2 Array{Float64,2}:\n│     2.33333  0.0\n└     0.0      1.0\n[ Info: Number of QTLs        : [2 2]","category":"page"},{"location":"basic/build_phenome/#Summary","page":"Build Phenome","title":"Summary","text":"","category":"section"},{"location":"basic/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"summary()","category":"page"},{"location":"basic/build_phenome/","page":"Build Phenome","title":"Build Phenome","text":"[ Info: --------- Genome Summary ---------\n[ Info: Number of Chromosome  : 2\n[ Info: \n[ Info: Chromosome Length (cM): 146.6\n[ Info: [80.3, 66.3]\n[ Info: \n[ Info: Number of Loci        : 4\n[ Info: [2, 2]\n[ Info: \n[ Info: Genotyping Error      : 0.0\n[ Info: Mutation Rate         : 0.0\n[ Info: \n[ Info: --------- Phenome Summary ---------\n[ Info: Number of Traits      : 2\n[ Info: Heritability (h2)     : [0.3, 0.5]\n┌ Info: \n│   Genetic_Variance =\n│    2×2 Array{Float64,2}:\n│     1.0  0.0\n└     0.0  1.0\n┌ Info: \n│   Residual_Variance =\n│    2×2 Array{Float64,2}:\n│     2.33333  0.0\n└     0.0      1.0\n[ Info: Number of QTLs        : [2 2]","category":"page"},{"location":"case/NAM/#NAM","page":"NAM","title":"NAM","text":"","category":"section"},{"location":"case/NAM/","page":"NAM","title":"NAM","text":"Nested association mapping (NAM) design  Buckler et al. (2009) is useful in plant breeding for its statistical power in detecting QTLs (Scott et al. 2020). Assuming the studied species is an out-cross crop, we initialize founders in the same way as in the previous example. The base population is simulated to have historical LD and in HWE after more than 1000 generations of random mating. Founders of NAM panel are determined by 25 diversity founders and 1 common parent subsetted from the simulated base population.","category":"page"},{"location":"case/NAM/","page":"NAM","title":"NAM","text":"# Build Genome and Phenome\nbuild_genome(\"map.csv\")\nbuild_phenome(\"map.csv\",\n              vg = [ 1 .5; .5  1],\n              h2 = [0.3, 0.7])\n# Initialize a population with 1,500 founders\nfounders = Founders(1500)\n# Let founders random mate with each other\n# for 1,000 generations \nfor _ in 1:1000\n    founders = mate(founders)\nend\n# Drop the size to 100 individuals and\n# continue the random mating for another 15 generations\nfor _ in 1:15\n    founders = mate(founders[1:100])\nend\n# Subset 26 founders to become the base population\ncommon_parents  = founders[1]\ndiverse_parents = founders[2:26]","category":"page"},{"location":"case/NAM/","page":"NAM","title":"NAM","text":"We let each founder mate with the common parent separately to generate 25 families in the generation F_1. Later, in each families, 200 recombinant inbred lines (RILs) are derived with selfing for 6 generations. Overall, we can have a NAM population with 25 families containing 200 RILs each through the following codes:","category":"page"},{"location":"case/NAM/","page":"NAM","title":"NAM","text":"# Cross each diverse parent with the common parent\nF1 = Cohort()\nfor parent in diverse_parents\n    F1 += common_parents * parent\nend\n# Each family produce 200 progenies by selfing\nargs = Dict(# Mating\n            :n_per_mate => 200,\n            :is_selfing => true,\n            # Selection\n            :is_random  => true,\n            # Breed\n            :n_gens     => 6,\n            :n_select   => 200)\nNAM = Cohort()\nfor family in F1\n    NAM += breed(family, args...)\nend","category":"page"},{"location":"case/NAM/#References","page":"NAM","title":"References","text":"","category":"section"},{"location":"case/NAM/","page":"NAM","title":"NAM","text":"Buckler, E. S., J. B. Holland, P. J. Bradbury, C. B. Acharya, P. J. Brown, et al., 2009 The Genetic Architecture of Maize Flow- ering Time. Science 325: 714–718","category":"page"},{"location":"case/NAM/","page":"NAM","title":"NAM","text":"Scott, M. F., O. Ladejobi, S. Amer, A. R. Bentley, J. Biernaskie, et al., 2020 Multi-parent populations in crops: a toolbox integrating genomics and genetic mapping with breeding. Heredity 125: 396–416.","category":"page"},{"location":"ge/multi_trait/#Multi-Trait-Genetic-Evaluation","page":"Multi-Trait Genetic Evaluation","title":"Multi-Trait Genetic Evaluation","text":"","category":"section"},{"location":"ge/gblup_pblup/#GBLUP-and-PBLUP-Evaluation","page":"GBLUP and PBLUP Evaluation","title":"GBLUP and PBLUP Evaluation","text":"","category":"section"},{"location":"lib/mate/#Mating-Functions","page":"Mating Functions","title":"Mating Functions","text":"","category":"section"},{"location":"lib/mate/","page":"Mating Functions","title":"Mating Functions","text":"mate","category":"page"},{"location":"lib/mate/#Main.XSim.mate","page":"Mating Functions","title":"Main.XSim.mate","text":"Initialize a cohort by population size\n\nmate(cohort_A         ::Cohort,\n     cohort_B         ::Cohort;\n     nA               ::Int64=cohort_A.n,\n     nB_per_A         ::Int64=1,\n     n_per_mate       ::Int64=1,\n     replace_A        ::Bool =false,\n     replace_B        ::Bool =false,\n     ratio_malefemale ::Union{Float64, Int64}=1, # 0 is no genders\n     scheme           ::String =\"none\",\n     args...)\n\nmate(cohort::Cohort; args...) =  mate(cohort, cohort; args...)\n\nArguments\n\ncohort_A : A cohort object that is treated as common mating parents.\ncohort_B : A cohort object that is a mating pool from which individuals are sampled to mate with cohort_A.\nnA : nA individuals will be sampled from cohort_A and treated as common parents.\nnB_per_A : nB_per_A individuals sampled from cohort_B will mate with each individual from cohort_A.\nn_per_mate : n_per_mate progenies will be reproduced from each pair of mating parent.\nreplace_A : Whether the sampling is replacable in cohort_A.\nreplace_B : Whether the sampling is replacable in cohort_B.\nratio_malefemale : By default, two cohorts which are male and female progenies will be returned. ratio_malefemale defined the progenies ratio of males over females. If ratio_malefemale=0, only one cohort will be returned.\nscheme : Available options are [\"random\", \"diallel cross\", \"selfing\"]. See the examples for more details.\n\nOutputs\n\nBy default, two cohort objects will be returned. The first cohort is assumed to be male progenies and the other cohort are female progenies. The size of two cohorts will folow the ratio raiot_malefemale. When ratio_malefemale is set to 0, only one cohort will be returned.\n\nExample\n\nRandom mating (Default)\n\nInitialize cohorts\n\njulia> cohort_A = Cohort(5)\njulia> cohort_B = Cohort(10)\n\nDefine mating events\n\njulia> args = Dict(:nA               => cohort_A.n,\n                   :nB_per_A         => 1,\n                   :replace_A        => false,\n                   :replace_B        => false,\n                   :n_per_mate       => 1,\n                   :ratio_malefemale => 1)\njulia> male, female = mate(cohort_A, cohort_B; args...)\n\n# Equivalent\njulia> male, female = mate(cohort_A, cohort_B)\n\n# Equivalent\njulia> male, female = mate(cohort_A, cohort_B; scheme=\"random\")\n\n# Equivalent\njulia> male, female = cohort_A * cohort_B\n\nCheck the pedigree to see if the mating goes as desired.\n\njulia> get_pedigree(male + female)\n5×3 LinearAlgebra.Adjoint{Int64,Array{Int64,2}}:\n 19  1   8\n 16  2   6\n 17  3  10\n 20  4  15\n 18  5  14\n\nDiallel cross\n\nInitialize cohorts\n\njulia> cohort_A = Cohort(2)\njulia> cohort_B = Cohort(5)\n\nDefine mating events\n\njulia> args = Dict(:nA              => sires.n,\n                   :nB_per_A        => dams.n,\n                   :replace_A       => false,\n                   :replace_B       => false,\n                   :n_per_mate      => 1,\n                   :ratio_malefemale=> 1)\njulia> male, female = mate(cohort_A, cohort_B; args...)\n# Equivalent\njulia> male, female = mate(cohort_A, cohort_B; scheme=\"diallel cross\")\n\nCheck the pedigree to see if the mating goes as desired.\n\njulia> get_pedigree(male + female)\n10×3 LinearAlgebra.Adjoint{Int64,Array{Int64,2}}:\n 12  2  7\n 10  2  6\n 11  2  4\n 14  1  3\n 15  1  5\n  9  2  5\n 13  1  6\n 17  1  4\n  8  2  3\n 16  1  7\n\nSelfing\n\nInitialize cohorts\n\njulia> parents = Cohort(5)\n\nIn the selfing scheme, only one cohort is required.\n\njulia> args = Dict(:nA          => 3,\n                   :replace_A   => false,\n                   :n_per_mate  => 5,\n                   :scheme      => \"selfing\")\njulia> progenies = mate(parents; args...)\n\nInspect the pedigree to verify the mating behavior\n\njulia> get_pedigree(progenies)\n15×3 LinearAlgebra.Adjoint{Int64,Array{Int64,2}}:\n  6  4  4\n  7  4  4\n  8  4  4\n  9  4  4\n 10  4  4\n 11  1  1\n 12  1  1\n 13  1  1\n 14  1  1\n 15  1  1\n 16  5  5\n 17  5  5\n 18  5  5\n 19  5  5\n 20  5  5\n\n\n\n\n\n","category":"function"},{"location":"case/crossbreed/#Rotational-Cross-Breeding","page":"Rotational Cross-Breeding","title":"Rotational Cross-Breeding","text":"","category":"section"},{"location":"case/crossbreed/","page":"Rotational Cross-Breeding","title":"Rotational Cross-Breeding","text":"At first, a cattle founder population can either be initialized based on real haplotypes or genotypes (described in the section \"generating founders\"), or be simulated from a base popula- tion in linkage and Hardy–Weinberg equilibria through random mating over many generations to generate LD. We start with a population of 1500 individuals. Except for selfing, we let them randomly mate for 1000 discrete generations. In order to expand the LD range, we drop the population size to 100, and have them random matings for another 15 generations. This approach is similar to that proposed in (Habier et al. 2010), which shows the similarity to real dairy cattle (de Roos et al. 2008). By default, the mate() function can have all individuals from the input cohort mating randomly with each other:","category":"page"},{"location":"case/crossbreed/","page":"Rotational Cross-Breeding","title":"Rotational Cross-Breeding","text":"# Build Genome and Phenome\nbuild_genome(\"map.csv\", species = \"cattle\")\nbuild_phenome(\"map.csv\",\n              vg = [ 1 .5; .5  1],\n              h2 = [0.3, 0.7])\n# Initialize a population with 1,500 founders\nfounders = Founders(1500)\n# Let founders random mate with each other\n# for 1,000 generations \nfor _ in 1:1000\n    founders = mate(founders)\nend\n# Drop the size to 100 individuals and\n# continue the random mating for another 15 generations\nfor _ in 1:15\n    founders = mate(founders[1:100])\nend\nsires_base = dams_base = founders","category":"page"},{"location":"case/crossbreed/","page":"Rotational Cross-Breeding","title":"Rotational Cross-Breeding","text":"Secondly, three pure breeds (breed A, B, and C) are generated in generation G_0 from the founder population through random matings for 10 generations. In breed A, 50 sires and 500 dams are randomly selected, and each sire is mated with 10 dams. The ratio of male over female is 1. In both breed B and C, 100 sires and 2000 dams are randomly selected, and each sire is mated with 20 dams. Thus, three pure breeds are simulated, where breed A is a small breed with 50 males and 500 females, and both breed B and C have 100 males and 2000 females.","category":"page"},{"location":"case/crossbreed/","page":"Rotational Cross-Breeding","title":"Rotational Cross-Breeding","text":"#Simulate three pure breeds\nargs_A  = Dict(# Mating\n               :nA               => 10,\n               :nB_per_A         => 2,\n               :ratio_malefemale => 1,\n               # Selection\n               :is_random        => true,\n               # Breeding\n               :n_gens           => 10,\n               :n_select_males   => 50)\nargs_BC = Dict(# Mating\n               :nA              => 20,\n               :nB_per_A        => 2,\n               :ratio_malefemale => 1,\n               # Selection\n               :is_random        => true,\n               # Breeding\n               :n_gens           => 10,\n               :n_select_males   => 100)\n# Breed A, B, and C\nsires_A, dams_A = breed(sires_base, dams_base;  args_A...)\nsires_B, dams_B = breed(sires_base, dams_base;  args_BC...)\nsires_C, dams_C = breed(sires_base, sires_base; args_BC...)","category":"page"},{"location":"case/crossbreed/","page":"Rotational Cross-Breeding","title":"Rotational Cross-Breeding","text":"Thirdly, we sample 100 sires from breed B and 1000 dams from breed C as two mating cohorts. Each sire will mate with 10 dams and leads to 1,000 male and 1,000 female progenies at generation G_1. which will be sires and dams in the next generation G_2. In G_2, we use 50 sires from Breed A and cross them with dams from G_1. And we can generate another 1,000 males and 1,000 females as parents for the next round. In G_3, 100 sires sampled from Breed C will mate with G_2 and produce another 2,000 progenies. The sire sources in the next generation will be back to Breed B and the cycle continues. The described process can be adequately expressed in XSimV2:","category":"page"},{"location":"case/crossbreed/","page":"Rotational Cross-Breeding","title":"Rotational Cross-Breeding","text":"# Rotation parameters\nargs = Dict(:n_pop            => 2000,\n            :n_per_mate       => 2,\n            :ratio_malefemale => 1)\n# Rotation (G1)\nsires_A, dams_A      = mate(sires_A, dams_A)\nsires_B, dams_B      = mate(sires_B, dams_B)\nsires_C, dams_C      = mate(sires_C, dams_C)\nmales_G1, females_G1 = mate(sires_B, dams_C; args...)\n# Rotation (G2)\nsires_A, dams_A      = mate(sires_A, dams_A)\nsires_B, dams_B      = mate(sires_B, dams_B)\nsires_C, dams_C      = mate(sires_C, dams_C)\nmales_G2, females_G2 = mate(sires_A, females_G1; args...)\n# Rotation (G3)\nsires_A, dams_A      = mate(sires_A, dams_A)\nsires_B, dams_B      = mate(sires_B, dams_B)\nsires_C, dams_C      = mate(sires_C, dams_C)\nmales_G3, females_G3 = mate(sires_C, females_G2; args...)","category":"page"},{"location":"case/crossbreed/#References","page":"Rotational Cross-Breeding","title":"References","text":"","category":"section"},{"location":"case/crossbreed/","page":"Rotational Cross-Breeding","title":"Rotational Cross-Breeding","text":"de Roos, A. P. W., B. J. Hayes, R. J. Spelman, and M. E. God- dard, 2008 Linkage Disequilibrium and Persistence of Phase in Holstein–Friesian, Jersey and Angus Cattle. Genetics 179: 1503–1512.","category":"page"},{"location":"case/crossbreed/","page":"Rotational Cross-Breeding","title":"Rotational Cross-Breeding","text":"Habier, D., J. Tetens, F.-R. Seefried, P. Lichtner, and G. Thaller, 2010 The impact of genetic relationship information on ge- nomic breeding values in German Holstein cattle. Genetics Selection Evolution 42: 5.","category":"page"},{"location":"lib/build_genome/#Build-Genome","page":"Build Genome","title":"Build Genome","text":"","category":"section"},{"location":"lib/build_genome/","page":"Build Genome","title":"Build Genome","text":"build_genome() defines the genetic information including numbers of chromosomes and loci, genetic position, physical position, minor allele frequency, mutation rates, and genotyping error rates.","category":"page"},{"location":"lib/build_genome/#Contents","page":"Build Genome","title":"Contents","text":"","category":"section"},{"location":"lib/build_genome/","page":"Build Genome","title":"Build Genome","text":"Pages = [\"build_genome.md\"]","category":"page"},{"location":"lib/build_genome/#Index","page":"Build Genome","title":"Index","text":"","category":"section"},{"location":"lib/build_genome/","page":"Build Genome","title":"Build Genome","text":"Pages = [\"build_genome.md\"]","category":"page"},{"location":"lib/build_genome/#Public-Interface","page":"Build Genome","title":"Public Interface","text":"","category":"section"},{"location":"lib/build_genome/","page":"Build Genome","title":"Build Genome","text":"build_genome","category":"page"},{"location":"lib/build_genome/#Main.XSim.build_genome","page":"Build Genome","title":"Main.XSim.build_genome","text":"Quick Start\n\nQuick setup by assigning number of markers and chromosomes.\n\nbuild_genome(;n_marker ::Int64=-1,\n              n_chr    ::Int64=10,\n              species  ::String=\"none\",\n              args...)\n\nArguments\n\nn_marker : Number of simulated markers for each chromosome\nn_chr: Number of simulated chromosome with length of 100 centimorgan\nspecies : Infer genetic position (Morgan) by pre-load linkage maps, available species are: [\"cattle\", and \"pig\"]\n\nExamples\n\njulia> build_genome(n_chr    = 2,\n                    n_marker = 10000)\n\n[ Info: --------- Genome Summary ---------\n[ Info: Number of Chromosome  : 2\n[ Info:\n[ Info: Chromosome Length (cM): 200.0\n[ Info: [100.0, 100.0]\n[ Info:\n[ Info: Number of Loci        : 20000\n[ Info: [10000, 10000]\n[ Info:\n[ Info: Genotyping Error      : 0.0\n[ Info: Mutation Rate         : 0.0\n[ Info:\n\n────────────────────────────────────────────────────────────────\n\nDefine genome by a file or a DataFrame\n\nDefine genome by providing a formatted dataframe or a path to the file.\n\nbuild_genome(dt      ::DataFrame;\n             species ::String=\"none\",\n             args...)\n\nbuild_genome(filename::String;\n             species ::String=\"none\",\n             args...)\n\nArguments\n\ndt : A DataFrame with required columns of chr and cM, or chr and bp if species is provided for the inference.\nfilename : A filepath to the file containing genome information.\nspecies : Adjust genetic position (Morgan) by pre-load linkage maps, available species are: [\"cattle\", and \"pig\"]\n\nExample of the DataFrame\n\n4×7 DataFrame\n Row │ id      chr    bp       cM       MAF      eff_1    eff_2\n     │ String  Int64  Int64    Float64  Float64  Float64  Float64\n─────┼────────────────────────────────────────────────────────────\n   1 │ snp_1       1  1818249     50.8      0.5      0.1      0.0\n   2 │ snp_2       1  6557697     80.3      0.5      0.0      0.0\n   3 │ snp_3       2  2298800     39.2      0.5      0.2      0.0\n   4 │ snp_4       2  5015698     66.3      0.5      0.0      0.5\n\nExamples\n\nBy a filepath\n\njulia> build_genome(\"path/map.csv\";\n                    rate_mutation=0.005, rate_error=0.01)\n\nor a dataframe\n\njulia> using DataFrames\njulia> data = CSV.read(\"path/map.csv\", DataFrame)\njulia> build_genome(data;\n                    rate_mutation=0.005, rate_error=0.01)\n\n[ Info: --------- Genome Summary ---------\n[ Info: Number of Chromosome  : 2\n[ Info:\n[ Info: Chromosome Length (cM): 146.6\n[ Info: [80.3, 66.3]\n[ Info:\n[ Info: Number of Loci        : 4\n[ Info: [2, 2]\n[ Info:\n[ Info: Genotyping Error      : 0.01\n[ Info: Mutation Rate         : 0.005\n[ Info:\n\nUse cattle genome as reference to infer the genetic positions\n\njulia> build_genome(\"path/map.csv\"; species=\"cattle\")\n\n[ Info: Arias,J.A. et al. (2009) A high density linkage map of the bovine genome. BMC Genetics, 10, 18.\n[ Info: Reference Genome : Btau 4.0\n[ Info: SNP Chip         : Affymetrix GeneChip Bovine Mapping 10K SNP kit\n\n┌ Warning: The provided genetic distances will be replaced with ones infered from preloaded linkage maps\n└ @ XSim ~/Dropbox/projects/XSim/src/objects/global.jl:118\n[ Info: --------- Genome Summary ---------\n[ Info: Number of Chromosome  : 2\n[ Info:\n[ Info: Chromosome Length (cM): 16.8\n[ Info: [15.1, 1.7]\n[ Info:\n[ Info: Number of Loci        : 4\n[ Info: [2, 2]\n[ Info:\n[ Info: Genotyping Error      : 0.0\n[ Info: Mutation Rate         : 0.0\n[ Info:\n\n\n────────────────────────────────────────────────────────────────\n\nExplict Definition\n\nDefine genome by providing genetic information of each loci explicitly.\n\nbuild_genome(chromosome    ::Array{Int64,   1},\n             bp            ::Array{Int64,   1},\n             cM            ::Array{Float64, 1},\n             maf           ::Array{Float64, 1};\n             rate_mutation ::Float64=0.0,\n             rate_error    ::Float64=0.0)\n\nArguments\n\nchromosome : Chromosome codes\nbp : Physical positions\ncM : Genetic positions\nmaf : Minor allele frequencies\nrate_mutation : Mutation rate\nrate_error : Error rate of genotyping\n\nExamples\n\njulia> ch  = [1,    1,     2,    2,    2]\njulia> bp  = [130,  205,   186,  503,  780]\njulia> cM  = [85.7, 149.1, 37.4, 83.6, 134.3]\njulia> maf = [0.5,  0.5,   0.5,  0.5,  0.5]\njulia> build_genome(ch, bp, cM, maf)\n\n[ Info: --------- Genome Summary ---------\n[ Info: Number of Chromosome  : 2\n[ Info:\n[ Info: Chromosome Length (cM): 283.4\n[ Info: [149.1, 134.3]\n[ Info:\n[ Info: Number of Loci        : 5\n[ Info: [2, 3]\n[ Info:\n[ Info: Genotyping Error      : 0.0\n[ Info: Mutation Rate         : 0.0\n[ Info:\n\n\n\n\n\n","category":"function"},{"location":"basic/build_genome/#Build-Genome","page":"Build Genome","title":"Build Genome","text":"","category":"section"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"build_genome defines the genetic information including numbers of chromosomes and loci, genetic position, physical position, and minor allele frequency of each locus, mutation rates, and genotyping error rates.","category":"page"},{"location":"basic/build_genome/#Data","page":"Build Genome","title":"Data","text":"","category":"section"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"In this page, you will need a file map.csv to complete the demonstrated examples.","category":"page"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"# map.csv\nid,chr,bp,cM,MAF,eff_1,eff_2\nsnp_1,1,1818249,50.8,0.5,0.1,0.0\nsnp_2,1,6557697,80.3,0.5,0.0,0.0\nsnp_3,2,2298800,39.2,0.5,0.2,0.0\nsnp_4,2,5015698,66.3,0.5,0.0,0.5","category":"page"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"using DataFrames\ndata = CSV.read(\"map.csv\", DataFrame)","category":"page"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"4×7 DataFrame\n Row │ id      chr    bp       cM       MAF      eff_1    eff_2\n     │ String  Int64  Int64    Float64  Float64  Float64  Float64\n─────┼────────────────────────────────────────────────────────────\n   1 │ snp 1       1  1818249     50.8      0.5      0.1      0.0\n   2 │ snp 2       1  6557697     80.3      0.5      0.0      0.0\n   3 │ snp_3       2  2298800     39.2      0.5      0.2      0.0\n   4 │ snp 4       2  5015698     66.3      0.5      0.0      0.5","category":"page"},{"location":"basic/build_genome/#Quick-Start","page":"Build Genome","title":"Quick Start","text":"","category":"section"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"build_genome(n_chr    = 2,\n             n_marker = 10000)","category":"page"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"[ Info: --------- Genome Summary ---------\n[ Info: Number of Chromosome  : 2\n[ Info:\n[ Info: Chromosome Length (cM): 200.0\n[ Info: [100.0, 100.0]\n[ Info:\n[ Info: Number of Loci        : 20000\n[ Info: [10000, 10000]\n[ Info:\n[ Info: Genotyping Error      : 0.0\n[ Info: Mutation Rate         : 0.0\n[ Info:","category":"page"},{"location":"basic/build_genome/#By-a-File-or-a-Dataframe","page":"Build Genome","title":"By a File or a Dataframe","text":"","category":"section"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"# By a filepath\nbuild_genome(\"map.csv\";\n             rate_mutation=0.005, rate_error=0.01)\n# or by a dataframe directly, they are equivalent.\nusing DataFrames\ndata = CSV.read(\"map.csv\", DataFrame)\nbuild_genome(data;\n             rate_mutation=0.005, rate_error=0.01)","category":"page"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"[ Info: --------- Genome Summary ---------\n[ Info: Number of Chromosome  : 2\n[ Info:\n[ Info: Chromosome Length (cM): 146.6\n[ Info: [80.3, 66.3]\n[ Info:\n[ Info: Number of Loci        : 4\n[ Info: [2, 2]\n[ Info:\n[ Info: Genotyping Error      : 0.01\n[ Info: Mutation Rate         : 0.005\n[ Info:","category":"page"},{"location":"basic/build_genome/#Load-with-Pre-Load-Reference","page":"Build Genome","title":"Load with Pre-Load Reference","text":"","category":"section"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"When the genetic distance (Morgan) is missing (or provided but not accurate) in the map, XSim can infer it by physical positions from published reference given the specified species.","category":"page"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"# Use cattle genome as reference\nbuild_genome(\"map.csv\"; species=\"cattle\")","category":"page"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"[ Info: Arias,J.A. et al. (2009) A high density linkage map of the bovine genome. BMC Genetics, 10, 18.\n[ Info: Reference Genome : Btau 4.0\n[ Info: SNP Chip         : Affymetrix GeneChip Bovine Mapping 10K SNP kit\n\n┌ Warning: The provided genetic distances will be replaced with ones infered from preloaded linkage maps\n└ @ XSim ~/Dropbox/projects/XSim/src/objects/global.jl:118\n[ Info: --------- Genome Summary ---------\n[ Info: Number of Chromosome  : 2\n[ Info:\n[ Info: Chromosome Length (cM): 16.8\n[ Info: [15.1, 1.7]\n[ Info:\n[ Info: Number of Loci        : 4\n[ Info: [2, 2]\n[ Info:\n[ Info: Genotyping Error      : 0.0\n[ Info: Mutation Rate         : 0.0\n[ Info:","category":"page"},{"location":"basic/build_genome/#By-Manual-Inputs","page":"Build Genome","title":"By Manual Inputs","text":"","category":"section"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"ch  = [1,    1,     2,    2,    2]\nbp  = [130,  205,   186,  503,  780]\ncM  = [85.7, 149.1, 37.4, 83.6, 134.3]\nmaf = [0.5,  0.5,   0.5,  0.5,  0.5]\nbuild_genome(ch, bp, cM, maf)","category":"page"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"[ Info: --------- Genome Summary ---------\n[ Info: Number of Chromosome  : 2\n[ Info:\n[ Info: Chromosome Length (cM): 283.4\n[ Info: [149.1, 134.3]\n[ Info:\n[ Info: Number of Loci        : 5\n[ Info: [2, 3]\n[ Info:\n[ Info: Genotyping Error      : 0.0\n[ Info: Mutation Rate         : 0.0\n[ Info:","category":"page"},{"location":"basic/build_genome/#Summary","page":"Build Genome","title":"Summary","text":"","category":"section"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"summary()","category":"page"},{"location":"basic/build_genome/","page":"Build Genome","title":"Build Genome","text":"[ Info: --------- Genome Summary ---------\n[ Info: Number of Chromosome  : 2\n[ Info: \n[ Info: Chromosome Length (cM): 146.6\n[ Info: [80.3, 66.3]\n[ Info: \n[ Info: Number of Loci        : 4\n[ Info: [2, 2]\n[ Info: \n[ Info: Genotyping Error      : 0.0\n[ Info: Mutation Rate         : 0.0\n[ Info: \n[ Info: --------- Phenome Summary ---------\n[ Info: Number of Traits      : 0\n[ Info: Heritability (h2)     : Float64[]\n┌ Info: \n└   Genetic_Variance = 0×0 Array{Float64,2}\n┌ Info: \n└   Residual_Variance = 0×0 Array{Float64,2}\n[ Info: Number of QTLs        : [0]","category":"page"},{"location":"basic/mate/#Mate","page":"Mate","title":"Mate","text":"","category":"section"},{"location":"basic/mate/#Random-mating-(Default)","page":"Mate","title":"Random mating (Default)","text":"","category":"section"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"cohort_A = Founders(5)\ncohort_B = Founders(10)\n# Random mating scheme\nargs = Dict(:nA               => cohort_A.n,\n            :nB_per_A         => 1,\n            :replace_A        => false,\n            :replace_B        => false,\n            :n_per_mate       => 1,\n            :ratio_malefemale => 1)\nmale, female = mate(cohort_A, cohort_B; args...)\n# Equivalent results without any argument\nmale, female = mate(cohort_A, cohort_B)\n# Equivalent results by specifying scheme argument\nmale, female = mate(cohort_A, cohort_B; scheme=\"random\")\n# Equivalent results with overloaded operator '*'\nmale, female = cohort_A * cohort_B","category":"page"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"[ Info: --------- Mating Summary ---------\n[ Info: Generated 5 individuals from 5 cohort_A individuals\n[ Info: Every cohort_A individuals mates with 1 individuals from cohort_B\n[ Info: And each mating reproduces 1 progenies\n[ Info: \n[ Info: --------- Offsprings Summary ---------\n([ Info: Cohort (2 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [-0.403 0.411]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [1.434 0.004]\n, [ Info: Cohort (3 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [-0.973 0.405]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [2.174 2.119]\n)","category":"page"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"Inspect the pedigree to verify the mating behavior","category":"page"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"get_pedigree(male + female)","category":"page"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"5×3 LinearAlgebra.Adjoint{Int64,Array{Int64,2}}:\n 19  1   8\n 16  2   6\n 17  3  10\n 20  4  15\n 18  5  14","category":"page"},{"location":"basic/mate/#Another-example-with-larger-smaple","page":"Mate","title":"Another example with larger smaple","text":"","category":"section"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"sires = Founders(10)\ndams  = Founders(200)\nargs = Dict(:nA               => 5,\n            :nB_per_A         => 10,\n            :replace_A        => false,\n            :replace_B        => false,\n            :n_per_mate       => 1,\n            :ratio_malefemale => 1)\nmale, female = mate(sires, dams; args...)","category":"page"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"[ Info: --------- Mating Summary ---------\n[ Info: Generated 50 individuals from 5 cohort_A individuals\n[ Info: Every cohort_A individual mates with 10 individuals from cohort_B\n[ Info: And each mating reproduces 1 progenies\n[ Info:\n[ Info: --------- Offsprings Summary ---------\n([ Info: Cohort (25 individuals)\n[ Info:\n[ Info: Mean of breeding values:\n[ Info: [2.15 0.252]\n[ Info:\n[ Info: Variance of breeding values:\n[ Info: [1.0 0.968]\n, [ Info: Cohort (25 individuals)\n[ Info:\n[ Info: Mean of breeding values:\n[ Info: [2.378 0.349]\n[ Info:\n[ Info: Variance of breeding values:\n[ Info: [1.176 0.863]\n)","category":"page"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"sires = Founders(2)\ndams  = Founders(5)\nargs = Dict(:nA        => sires.n,\n            :nB_per_A  => dams.n,\n            :replace_A => false,\n            :replace_B => false,\n            :n_per_mate=> 1,\n            :ratio_malefemale=> 1)\nmale, female = mate(sires, dams; args...)\n# Equivalent results by specifying scheme argument __\nmale, female = mate(sires, dams; scheme = \"diallel cross\")","category":"page"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"Inspect the pedigree to verify the mating behavior","category":"page"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"get_pedigree(male + female)","category":"page"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"10×3 LinearAlgebra.Adjoint{Int64,Array{Int64,2}}:\n 12  2  7\n 10  2  6\n 11  2  4\n 14  1  3\n 15  1  5\n  9  2  5\n 13  1  6\n 17  1  4\n  8  2  3\n 16  1  7","category":"page"},{"location":"basic/mate/#Selfing","page":"Mate","title":"Selfing","text":"","category":"section"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"parents = Founders(5)\nargs = Dict(:nA               => 3,\n            :replace_A        => false,\n            :n_per_mate       => 5,\n            :scheme       => \"selfing\")\nprogenies = mate(parents; args...)","category":"page"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"[ Info: --------- Mating Summary ---------\n[ Info: Generated 250 individuals from 5 cohort_A individuals\n[ Info: Each selfing reproduces 50 progenies\n[ Info: \n[ Info: --------- Offsprings Summary ---------\n[ Info: Cohort (250 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [-0.824 0.225]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [0.311 0.709]","category":"page"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"Inspect the pedigree to verify the mating behavior","category":"page"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"get_pedigree(progenies)","category":"page"},{"location":"basic/mate/","page":"Mate","title":"Mate","text":"15×3 LinearAlgebra.Adjoint{Int64,Array{Int64,2}}:\n  6  4  4\n  7  4  4\n  8  4  4\n  9  4  4\n 10  4  4\n 11  1  1\n 12  1  1\n 13  1  1\n 14  1  1\n 15  1  1\n 16  5  5\n 17  5  5\n 18  5  5\n 19  5  5\n 20  5  5","category":"page"},{"location":"#XSim.jl","page":"Home","title":"XSim.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for XSim.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: New Users\nNew users are strongly encouraged to read the page Demo: Step by Step first.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Efficient CPOS algorithm\nFounders characterized by real genome sequence data\nComplicated pedigree structures among descendants\nStrong extensibilty\nModularism design\nStraightforward interface","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"XSim\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"or the beta version","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> Pkg.add(PackageSpec(name=\"XSim\", rev=\"master?\"))","category":"page"},{"location":"#Outline","page":"Home","title":"Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n   \"lib/build_genome.md\",\n    \"lib/build_phenome.md\",\n    \"lib/cohort.md\",\n    \"lib/mate.md\",\n    \"basic/select.md\",\n    \"basic/breed.md\",\n    \"case/simple.md\",\n    \"case/crossbreed.md\",\n    \"case/NAM.md\",\n    \"lib/build_genome.md\"\n\n]\nDepth = 1","category":"page"},{"location":"#Library","page":"Home","title":"Library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"lib/build_genome.md\",]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"lib/build_genome.md\",]","category":"page"},{"location":"#Cite-XSimV2","page":"Home","title":"Cite XSimV2","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"@article{cheng_xsim_2015,\n\ttitle = {XSim: Simulation of Descendants from Ancestors with Sequence Data},\n\tvolume = {5},\n\tissn = {2160-1836},\n\tshorttitle = {XSim},\n\turl = {http://g3journal.org/lookup/doi/10.1534/g3.115.016683},\n\tdoi = {10.1534/g3.115.016683},\n\tlanguage = {en},\n\tnumber = {7},\n\tjournal = {G3\\&amp;\\#58; Genes{\\textbar}Genomes{\\textbar}Genetics},\n\tauthor = {Cheng, Hao and Garrick, Dorian and Fernando, Rohan},\n\tmonth = jul,\n\tyear = {2015},\n\tpages = {1415--1417},\n}","category":"page"},{"location":"demo/#Demo:-Step-by-Step","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"","category":"section"},{"location":"demo/#Step-0.-Load-XSim","page":"Demo: Step by Step","title":"Step 0. Load XSim","text":"","category":"section"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"julia> using XSim","category":"page"},{"location":"demo/#Step-1.-Setup-genome-and-phenome","page":"Demo: Step by Step","title":"Step 1. Setup genome and phenome","text":"","category":"section"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"The demo example simulates 10 chromosomes with 100 loci each. And 2 independent traits are controlled by 3 and 8 QTLs, respectively.","category":"page"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"julia> build_genome(n_chr=10, n_marker=100)\n[ Info: --------- Genome Summary ---------\n[ Info: Number of Chromosome  : 10\n[ Info: \n[ Info: Chromosome Length (cM): 1000.0\n[ Info: [100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]\n[ Info: \n[ Info: Number of Loci        : 1000\n[ Info: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\n[ Info: \n[ Info: Genotyping Error      : 0.0\n[ Info: Mutation Rate         : 0.0\n[ Info: \n\njulia> build_phenome([3, 8])\n[ Info: --------- Phenome Summary ---------\n[ Info: Number of Traits      : 2\n[ Info: Heritability (h2)     : [0.5, 0.5]\n┌ Info: \n│   Genetic_Variance =\n│    2×2 Array{Float64,2}:\n│     1.0  0.0\n└     0.0  1.0\n┌ Info: \n│   Residual_Variance =\n│    2×2 Array{Float64,2}:\n│     1.0  0.0\n└     0.0  1.0\n[ Info: Number of QTLs        : [3 8]","category":"page"},{"location":"demo/#Step-2.-Initialize-Founders","page":"Demo: Step by Step","title":"Step 2. Initialize Founders","text":"","category":"section"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"Simulate 3 founder sires","category":"page"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"julia> n_sires = 3\n\njulia> sires   = Founders(n_sires)\n[ Info: Cohort (3 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [2.232 -0.609]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [2.374 0.873]","category":"page"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"Simulate 20 founder dams","category":"page"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"julia> n_dams  = 20\n\njulia> dams    = Founders(n_dams)\n[ Info: Cohort (20 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [2.117 -0.369]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [0.519 0.732]","category":"page"},{"location":"demo/#Step-3.-Mating","page":"Demo: Step by Step","title":"Step 3. Mating","text":"","category":"section"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"Here, the first cohort in the function mate is cohort_A, and the second one is cohort_B. We let each sire mate with 5 dams, and each mating event will produce 1 male and 1 female progenies when :ratio_malefemale is set to 1.0.","category":"page"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"julia> args_mate = Dict(:nA           => 3,\n                        :nB_per_A     => 5,\n                        :n_per_mate   => 2,\n                        :ratio_malefemale => 1.0)\n\njulia> males, females = mate(sires, dams; args_mate...)\n[ Info: --------- Mating Summary ---------\n[ Info: Generated 30 individuals from 3 cohort_A individuals\n[ Info: Every cohort_A individual mates with 5 individuals from cohort_B\n[ Info: And each mating reproduces 2 progenies\n[ Info: \n[ Info: --------- Offsprings Summary ---------\n([ Info: Cohort (15 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [2.294 -0.592]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [0.846 0.33]\n, [ Info: Cohort (15 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [1.614 -0.586]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [1.313 0.527]\n)","category":"page"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"Users can check how the mating was performed by calling get_pedigree() function. The first column is individual ID, and the second and the third correspond to the individual's sire and dam, respectively. We can use + to concatenate two cohort.","category":"page"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"julia> progenies = males + females\n\njulia> get_pedigree(progenies)\n30×3 Array{Int64,2}:\n 24  2  22\n 25  2  22\n 26  2   7\n 27  2   7\n 28  2  11\n 29  2  11\n 30  2   6\n 31  2   6\n 32  2  17\n 33  2  17\n 34  1  23\n 35  1  23\n 36  1  19\n 37  1  19\n 38  1   4\n 39  1   4\n 40  1  16\n 41  1  16\n 42  1  13\n 43  1  13\n 44  3  20\n 45  3  20\n 46  3  18\n 47  3  18\n 48  3  12\n 49  3  12\n 50  3   9\n 51  3   9\n 52  3   5\n 53  3   5","category":"page"},{"location":"demo/#Step-4.-Selection","page":"Demo: Step by Step","title":"Step 4. Selection","text":"","category":"section"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"Next, although the heritability is set to 0.5, we can reassign it in :h2 with a new value (or a vector for multiple traits). The argument :weights allows us to weight two traits differently in the selction. This example we select 3 sires from the 15 male progenies and 10 dams from the 15 female progenies.","category":"page"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"julia> args_select = Dict(:h2     => [.8, .5],\n                          :weights=> [.6, .4])\n\njulia> sires       = select(males, 3; args_select...)\n[ Info: --------- Selection Summary ---------\n[ Info: Select 3 individuals out of 15 individuals\n[ Info: Selection differential (P): [0.794 0.972]\n[ Info: Selection response     (G): [0.68 1.078]\n┌ Info: \n│   Residual_Variance =\n│    2×2 Array{Float64,2}:\n│     0.25  0.0\n└     0.0   1.0\n[ Info: --------- Offsprings Summary ---------\n[ Info: Cohort (3 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [2.591 0.597]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [0.972 0.095]\n\njulia> dams        = select(females, 10; args_select...)\n[ Info: --------- Selection Summary ---------\n[ Info: Select 10 individuals out of 15 individuals\n[ Info: Selection differential (P): [0.328 0.17]\n[ Info: Selection response     (G): [0.37 0.237]\n┌ Info: \n│   Residual_Variance =\n│    2×2 Array{Float64,2}:\n│     0.25  0.0\n└     0.0   1.0\n[ Info: --------- Offsprings Summary ---------\n[ Info: Cohort (10 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [2.883 -0.093]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [0.56 1.007]","category":"page"},{"location":"demo/#Step-5.-Expand-to-Multiple-Generations","page":"Demo: Step by Step","title":"Step 5. Expand to Multiple Generations","text":"","category":"section"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"We can expand the described mate() and select() to :n_gens generations. By assigning :n_select_males and :n_select_females to specify how many progenies will be passed to the next generation.","category":"page"},{"location":"demo/#Expand-to-multiple-generations","page":"Demo: Step by Step","title":"Expand to multiple generations","text":"","category":"section"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"julia> args_breed  = Dict(:n_gens           => 5,\n                          :n_select_males   => 3,\n                          :n_select_females => 20)\n\njulia> sires, dams = breed(sires, dams; args_breed..., args_mate..., args_select...)\n[ Info: Gen 0 -> Mean of BVs: [2.816 0.066], Variance of BVs: [0.598 0.863]\n[ Info: Gen 1 -> Mean of BVs: [3.063 0.429], Variance of BVs: [0.998 1.014]\n[ Info: Gen 2 -> Mean of BVs: [3.596 0.483], Variance of BVs: [0.481 0.524]\n[ Info: Gen 3 -> Mean of BVs: [4.001 0.84], Variance of BVs: [0.138 0.574]\n[ Info: Gen 4 -> Mean of BVs: [4.18 0.965], Variance of BVs: [0.065 0.807]\n[ Info: Gen 5 -> Mean of BVs: [4.18 1.182], Variance of BVs: [0.065 0.515]\n([ Info: Cohort (3 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [4.192 1.523]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [0.03 0.83]\n, [ Info: Cohort (15 individuals)\n[ Info: \n[ Info: Mean of breeding values: \n[ Info: [4.177 1.114]\n[ Info: \n[ Info: Variance of breeding values: \n[ Info: [0.074 0.477]","category":"page"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"julia> summary(sires + dams)\nDict{String,Any} with 3 entries:\n  \"mu_g\"  => [4.18 1.182]\n  \"var_g\" => [0.065 0.515]\n  \"n\"     => 18","category":"page"},{"location":"demo/#Modularism","page":"Demo: Step by Step","title":"Modularism","text":"","category":"section"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"Codes below are equivalent to the breed() function","category":"page"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"julia>  for i in 1:5\n            males, females = mate(sires, dams; args_mate...)\n            sires          = select(males, 3; args_select...)\n            dams           = select(females, 20; args_select...)\n        end\n","category":"page"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"julia> summary(sires + dams)\nDict{String,Any} with 3 entries:\n  \"mu_g\"  => [4.259 2.05]\n  \"var_g\" => [0.024 0.454]\n  \"n\"     => 18","category":"page"},{"location":"demo/#Complete-Codes","page":"Demo: Step by Step","title":"Complete Codes","text":"","category":"section"},{"location":"demo/","page":"Demo: Step by Step","title":"Demo: Step by Step","text":"# Load XSim\nusing XSim\nimport Random\nRandom.seed!(95616)\n\n# Build genome and phenome\nbuild_genome(n_chr=10, n_marker=100)\nbuild_phenome([3, 8])\n\n# Initialize founders\nn_sires = 3\nn_dams  = 20\nsires   = Founders(n_sires)\ndams    = Founders(n_dams)\n\n# Define parameters\nargs     = Dict(# mating\n                :nA               => 3,\n                :nB_per_A         => 5,\n                :n_per_mate       => 2,\n                :ratio_malefemale => 1.0,\n                # selection\n                :h2               => [.8, .5],\n                :weights          => [.6, .4],\n                # breeding\n                :n_gens           => 5,\n                :n_select_males   => 3,\n                :n_select_females => 20)\n\n# Breeding program\nsires, dams   = breed(sires, dams; args...)","category":"page"},{"location":"dev/expand_genome/#Expand-Genome-Information","page":"Expand Genome Information","title":"Expand Genome Information","text":"","category":"section"}]
}
